// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "components.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tec {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Renderable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Renderable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Orientation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Orientation_reflection_ = NULL;
const ::google::protobuf::Descriptor* View_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  View_reflection_ = NULL;
const ::google::protobuf::Descriptor* Animation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Animation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;
struct ComponentOneofInstance {
  const ::tec::proto::Renderable* renderable_;
  const ::tec::proto::Position* position_;
  const ::tec::proto::Orientation* orientation_;
  const ::tec::proto::View* view_;
  const ::tec::proto::Animation* animation_;
  const ::tec::proto::Scale* scale_;
}* Component_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_components_2eproto() {
  protobuf_AddDesc_components_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "components.proto");
  GOOGLE_CHECK(file != NULL);
  Renderable_descriptor_ = file->message_type(0);
  static const int Renderable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, shader_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, mesh_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, hidden_),
  };
  Renderable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Renderable_descriptor_,
      Renderable::default_instance_,
      Renderable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, _has_bits_[0]),
      -1,
      -1,
      sizeof(Renderable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Renderable, _internal_metadata_),
      -1);
  Position_descriptor_ = file->message_type(1);
  static const int Position_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
  };
  Position_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      -1,
      -1,
      sizeof(Position),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _internal_metadata_),
      -1);
  Orientation_descriptor_ = file->message_type(2);
  static const int Orientation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, w_),
  };
  Orientation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Orientation_descriptor_,
      Orientation::default_instance_,
      Orientation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Orientation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Orientation, _internal_metadata_),
      -1);
  View_descriptor_ = file->message_type(3);
  static const int View_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, active_),
  };
  View_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      View_descriptor_,
      View::default_instance_,
      View_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, _has_bits_[0]),
      -1,
      -1,
      sizeof(View),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(View, _internal_metadata_),
      -1);
  Animation_descriptor_ = file->message_type(4);
  static const int Animation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, animation_name_),
  };
  Animation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Animation_descriptor_,
      Animation::default_instance_,
      Animation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Animation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Animation, _internal_metadata_),
      -1);
  Scale_descriptor_ = file->message_type(5);
  static const int Scale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, z_),
  };
  Scale_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Scale_descriptor_,
      Scale::default_instance_,
      Scale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, _has_bits_[0]),
      -1,
      -1,
      sizeof(Scale),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scale, _internal_metadata_),
      -1);
  Component_descriptor_ = file->message_type(6);
  static const int Component_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, renderable_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, position_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, orientation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, view_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, animation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Component_default_oneof_instance_, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, component_),
  };
  Component_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      -1,
      -1,
      Component_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _oneof_case_[0]),
      sizeof(Component),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _internal_metadata_),
      -1);
  Entity_descriptor_ = file->message_type(7);
  static const int Entity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, components_),
  };
  Entity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _has_bits_[0]),
      -1,
      -1,
      sizeof(Entity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_),
      -1);
  EntityList_descriptor_ = file->message_type(8);
  static const int EntityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityList, entities_),
  };
  EntityList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityList_descriptor_,
      EntityList::default_instance_,
      EntityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityList, _has_bits_[0]),
      -1,
      -1,
      sizeof(EntityList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityList, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_components_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Renderable_descriptor_, &Renderable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Orientation_descriptor_, &Orientation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      View_descriptor_, &View::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Animation_descriptor_, &Animation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Scale_descriptor_, &Scale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Component_descriptor_, &Component::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityList_descriptor_, &EntityList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_components_2eproto() {
  delete Renderable::default_instance_;
  delete Renderable_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Orientation::default_instance_;
  delete Orientation_reflection_;
  delete View::default_instance_;
  delete View_reflection_;
  delete Animation::default_instance_;
  delete Animation_reflection_;
  delete Scale::default_instance_;
  delete Scale_reflection_;
  delete Component::default_instance_;
  delete Component_default_oneof_instance_;
  delete Component_reflection_;
  delete Entity::default_instance_;
  delete Entity_reflection_;
  delete EntityList::default_instance_;
  delete EntityList_reflection_;
}

void protobuf_AddDesc_components_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020components.proto\022\ttec.proto\"D\n\nRendera"
    "ble\022\023\n\013shader_name\030\001 \001(\t\022\021\n\tmesh_name\030\002 "
    "\001(\t\022\016\n\006hidden\030\003 \001(\010\"+\n\010Position\022\t\n\001x\030\001 \001"
    "(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"9\n\013Orientation\022"
    "\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 "
    "\002(\002\"\026\n\004View\022\016\n\006active\030\001 \001(\010\"#\n\tAnimation"
    "\022\026\n\016animation_name\030\001 \001(\t\"(\n\005Scale\022\t\n\001x\030\001"
    " \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\214\002\n\tComponent"
    "\022+\n\nrenderable\030\001 \001(\0132\025.tec.proto.Rendera"
    "bleH\000\022\'\n\010position\030\002 \001(\0132\023.tec.proto.Posi"
    "tionH\000\022-\n\013orientation\030\003 \001(\0132\026.tec.proto."
    "OrientationH\000\022\037\n\004view\030\004 \001(\0132\017.tec.proto."
    "ViewH\000\022)\n\tanimation\030\005 \001(\0132\024.tec.proto.An"
    "imationH\000\022!\n\005Scale\030\006 \001(\0132\020.tec.proto.Sca"
    "leH\000B\013\n\tcomponent\">\n\006Entity\022\n\n\002id\030\001 \002(\004\022"
    "(\n\ncomponents\030\002 \003(\0132\024.tec.proto.Componen"
    "t\"1\n\nEntityList\022#\n\010entities\030\001 \003(\0132\021.tec."
    "proto.Entity", 692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "components.proto", &protobuf_RegisterTypes);
  Renderable::default_instance_ = new Renderable();
  Position::default_instance_ = new Position();
  Orientation::default_instance_ = new Orientation();
  View::default_instance_ = new View();
  Animation::default_instance_ = new Animation();
  Scale::default_instance_ = new Scale();
  Component::default_instance_ = new Component();
  Component_default_oneof_instance_ = new ComponentOneofInstance();
  Entity::default_instance_ = new Entity();
  EntityList::default_instance_ = new EntityList();
  Renderable::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Orientation::default_instance_->InitAsDefaultInstance();
  View::default_instance_->InitAsDefaultInstance();
  Animation::default_instance_->InitAsDefaultInstance();
  Scale::default_instance_->InitAsDefaultInstance();
  Component::default_instance_->InitAsDefaultInstance();
  Entity::default_instance_->InitAsDefaultInstance();
  EntityList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_components_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_components_2eproto {
  StaticDescriptorInitializer_components_2eproto() {
    protobuf_AddDesc_components_2eproto();
  }
} static_descriptor_initializer_components_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Renderable::kShaderNameFieldNumber;
const int Renderable::kMeshNameFieldNumber;
const int Renderable::kHiddenFieldNumber;
#endif  // !_MSC_VER

Renderable::Renderable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Renderable)
}

void Renderable::InitAsDefaultInstance() {
}

Renderable::Renderable(const Renderable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Renderable)
}

void Renderable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  shader_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesh_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hidden_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Renderable::~Renderable() {
  // @@protoc_insertion_point(destructor:tec.proto.Renderable)
  SharedDtor();
}

void Renderable::SharedDtor() {
  shader_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mesh_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Renderable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Renderable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Renderable_descriptor_;
}

const Renderable& Renderable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Renderable* Renderable::default_instance_ = NULL;

Renderable* Renderable::New(::google::protobuf::Arena* arena) const {
  Renderable* n = new Renderable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Renderable::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_shader_name()) {
      shader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mesh_name()) {
      mesh_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    hidden_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Renderable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Renderable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string shader_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shader_name().data(), this->shader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.Renderable.shader_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mesh_name;
        break;
      }

      // optional string mesh_name = 2;
      case 2: {
        if (tag == 18) {
         parse_mesh_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mesh_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mesh_name().data(), this->mesh_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.Renderable.mesh_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hidden;
        break;
      }

      // optional bool hidden = 3;
      case 3: {
        if (tag == 24) {
         parse_hidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_)));
          set_has_hidden();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Renderable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Renderable)
  return false;
#undef DO_
}

void Renderable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Renderable)
  // optional string shader_name = 1;
  if (has_shader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shader_name().data(), this->shader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Renderable.shader_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shader_name(), output);
  }

  // optional string mesh_name = 2;
  if (has_mesh_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mesh_name().data(), this->mesh_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Renderable.mesh_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mesh_name(), output);
  }

  // optional bool hidden = 3;
  if (has_hidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hidden(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Renderable)
}

::google::protobuf::uint8* Renderable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Renderable)
  // optional string shader_name = 1;
  if (has_shader_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shader_name().data(), this->shader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Renderable.shader_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shader_name(), target);
  }

  // optional string mesh_name = 2;
  if (has_mesh_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mesh_name().data(), this->mesh_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Renderable.mesh_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mesh_name(), target);
  }

  // optional bool hidden = 3;
  if (has_hidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hidden(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Renderable)
  return target;
}

int Renderable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string shader_name = 1;
    if (has_shader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shader_name());
    }

    // optional string mesh_name = 2;
    if (has_mesh_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mesh_name());
    }

    // optional bool hidden = 3;
    if (has_hidden()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Renderable::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Renderable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Renderable>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Renderable::MergeFrom(const Renderable& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shader_name()) {
      set_has_shader_name();
      shader_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shader_name_);
    }
    if (from.has_mesh_name()) {
      set_has_mesh_name();
      mesh_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mesh_name_);
    }
    if (from.has_hidden()) {
      set_hidden(from.hidden());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Renderable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Renderable::CopyFrom(const Renderable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Renderable::IsInitialized() const {

  return true;
}

void Renderable::Swap(Renderable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Renderable::InternalSwap(Renderable* other) {
  shader_name_.Swap(&other->shader_name_);
  mesh_name_.Swap(&other->mesh_name_);
  std::swap(hidden_, other->hidden_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Renderable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Renderable_descriptor_;
  metadata.reflection = Renderable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Renderable

// optional string shader_name = 1;
bool Renderable::has_shader_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Renderable::set_has_shader_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Renderable::clear_has_shader_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Renderable::clear_shader_name() {
  shader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shader_name();
}
 const ::std::string& Renderable::shader_name() const {
  // @@protoc_insertion_point(field_get:tec.proto.Renderable.shader_name)
  return shader_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Renderable::set_shader_name(const ::std::string& value) {
  set_has_shader_name();
  shader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.Renderable.shader_name)
}
 void Renderable::set_shader_name(const char* value) {
  set_has_shader_name();
  shader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.Renderable.shader_name)
}
 void Renderable::set_shader_name(const char* value, size_t size) {
  set_has_shader_name();
  shader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.Renderable.shader_name)
}
 ::std::string* Renderable::mutable_shader_name() {
  set_has_shader_name();
  // @@protoc_insertion_point(field_mutable:tec.proto.Renderable.shader_name)
  return shader_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Renderable::release_shader_name() {
  clear_has_shader_name();
  return shader_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Renderable::set_allocated_shader_name(::std::string* shader_name) {
  if (shader_name != NULL) {
    set_has_shader_name();
  } else {
    clear_has_shader_name();
  }
  shader_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shader_name);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Renderable.shader_name)
}

// optional string mesh_name = 2;
bool Renderable::has_mesh_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Renderable::set_has_mesh_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Renderable::clear_has_mesh_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Renderable::clear_mesh_name() {
  mesh_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mesh_name();
}
 const ::std::string& Renderable::mesh_name() const {
  // @@protoc_insertion_point(field_get:tec.proto.Renderable.mesh_name)
  return mesh_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Renderable::set_mesh_name(const ::std::string& value) {
  set_has_mesh_name();
  mesh_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.Renderable.mesh_name)
}
 void Renderable::set_mesh_name(const char* value) {
  set_has_mesh_name();
  mesh_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.Renderable.mesh_name)
}
 void Renderable::set_mesh_name(const char* value, size_t size) {
  set_has_mesh_name();
  mesh_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.Renderable.mesh_name)
}
 ::std::string* Renderable::mutable_mesh_name() {
  set_has_mesh_name();
  // @@protoc_insertion_point(field_mutable:tec.proto.Renderable.mesh_name)
  return mesh_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Renderable::release_mesh_name() {
  clear_has_mesh_name();
  return mesh_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Renderable::set_allocated_mesh_name(::std::string* mesh_name) {
  if (mesh_name != NULL) {
    set_has_mesh_name();
  } else {
    clear_has_mesh_name();
  }
  mesh_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mesh_name);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Renderable.mesh_name)
}

// optional bool hidden = 3;
bool Renderable::has_hidden() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Renderable::set_has_hidden() {
  _has_bits_[0] |= 0x00000004u;
}
void Renderable::clear_has_hidden() {
  _has_bits_[0] &= ~0x00000004u;
}
void Renderable::clear_hidden() {
  hidden_ = false;
  clear_has_hidden();
}
 bool Renderable::hidden() const {
  // @@protoc_insertion_point(field_get:tec.proto.Renderable.hidden)
  return hidden_;
}
 void Renderable::set_hidden(bool value) {
  set_has_hidden();
  hidden_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Renderable.hidden)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:tec.proto.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New(::google::protobuf::Arena* arena) const {
  Position* n = new Position;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Position::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Position*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Position)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Position)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Position)
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Position* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Position

// optional float x = 1;
bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Position::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.x)
  return x_;
}
 void Position::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.x)
}

// optional float y = 2;
bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Position::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.y)
  return y_;
}
 void Position::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.y)
}

// optional float z = 3;
bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Position::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Position.z)
  return z_;
}
 void Position::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Position.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Orientation::kXFieldNumber;
const int Orientation::kYFieldNumber;
const int Orientation::kZFieldNumber;
const int Orientation::kWFieldNumber;
#endif  // !_MSC_VER

Orientation::Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Orientation)
}

void Orientation::InitAsDefaultInstance() {
}

Orientation::Orientation(const Orientation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Orientation)
}

void Orientation::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:tec.proto.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Orientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Orientation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Orientation_descriptor_;
}

const Orientation& Orientation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Orientation* Orientation::default_instance_ = NULL;

Orientation* Orientation::New(::google::protobuf::Arena* arena) const {
  Orientation* n = new Orientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Orientation::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Orientation*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Orientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // required float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Orientation)
  return false;
#undef DO_
}

void Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Orientation)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Orientation)
}

::google::protobuf::uint8* Orientation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Orientation)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Orientation)
  return target;
}

int Orientation::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_w()) {
    // required float w = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int Orientation::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float w = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Orientation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Orientation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Orientation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Orientation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Orientation::Swap(Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Orientation::InternalSwap(Orientation* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Orientation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Orientation_descriptor_;
  metadata.reflection = Orientation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Orientation

// required float x = 1;
bool Orientation::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Orientation::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Orientation::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Orientation::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Orientation::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.x)
  return x_;
}
 void Orientation::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.x)
}

// required float y = 2;
bool Orientation::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Orientation::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Orientation::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Orientation::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Orientation::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.y)
  return y_;
}
 void Orientation::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.y)
}

// required float z = 3;
bool Orientation::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Orientation::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Orientation::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Orientation::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Orientation::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.z)
  return z_;
}
 void Orientation::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.z)
}

// required float w = 4;
bool Orientation::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Orientation::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
void Orientation::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
void Orientation::clear_w() {
  w_ = 0;
  clear_has_w();
}
 float Orientation::w() const {
  // @@protoc_insertion_point(field_get:tec.proto.Orientation.w)
  return w_;
}
 void Orientation::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Orientation.w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int View::kActiveFieldNumber;
#endif  // !_MSC_VER

View::View()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.View)
}

void View::InitAsDefaultInstance() {
}

View::View(const View& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.View)
}

void View::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

View::~View() {
  // @@protoc_insertion_point(destructor:tec.proto.View)
  SharedDtor();
}

void View::SharedDtor() {
  if (this != default_instance_) {
  }
}

void View::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* View::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return View_descriptor_;
}

const View& View::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

View* View::default_instance_ = NULL;

View* View::New(::google::protobuf::Arena* arena) const {
  View* n = new View;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void View::Clear() {
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool View::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.View)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.View)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.View)
  return false;
#undef DO_
}

void View::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.View)
  // optional bool active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.View)
}

::google::protobuf::uint8* View::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.View)
  // optional bool active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.View)
  return target;
}

int View::ByteSize() const {
  int total_size = 0;

  // optional bool active = 1;
  if (has_active()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void View::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const View* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const View>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void View::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {

  return true;
}

void View::Swap(View* other) {
  if (other == this) return;
  InternalSwap(other);
}
void View::InternalSwap(View* other) {
  std::swap(active_, other->active_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata View::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = View_descriptor_;
  metadata.reflection = View_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// View

// optional bool active = 1;
bool View::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void View::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
void View::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
void View::clear_active() {
  active_ = false;
  clear_has_active();
}
 bool View::active() const {
  // @@protoc_insertion_point(field_get:tec.proto.View.active)
  return active_;
}
 void View::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.View.active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Animation::kAnimationNameFieldNumber;
#endif  // !_MSC_VER

Animation::Animation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Animation)
}

void Animation::InitAsDefaultInstance() {
}

Animation::Animation(const Animation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Animation)
}

void Animation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  animation_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Animation::~Animation() {
  // @@protoc_insertion_point(destructor:tec.proto.Animation)
  SharedDtor();
}

void Animation::SharedDtor() {
  animation_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Animation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Animation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Animation_descriptor_;
}

const Animation& Animation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Animation* Animation::default_instance_ = NULL;

Animation* Animation::New(::google::protobuf::Arena* arena) const {
  Animation* n = new Animation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Animation::Clear() {
  if (has_animation_name()) {
    animation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Animation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Animation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string animation_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animation_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animation_name().data(), this->animation_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tec.proto.Animation.animation_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Animation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Animation)
  return false;
#undef DO_
}

void Animation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Animation)
  // optional string animation_name = 1;
  if (has_animation_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animation_name().data(), this->animation_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Animation.animation_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->animation_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Animation)
}

::google::protobuf::uint8* Animation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Animation)
  // optional string animation_name = 1;
  if (has_animation_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animation_name().data(), this->animation_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tec.proto.Animation.animation_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->animation_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Animation)
  return target;
}

int Animation::ByteSize() const {
  int total_size = 0;

  // optional string animation_name = 1;
  if (has_animation_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->animation_name());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Animation::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Animation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Animation>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Animation::MergeFrom(const Animation& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animation_name()) {
      set_has_animation_name();
      animation_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.animation_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Animation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Animation::CopyFrom(const Animation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Animation::IsInitialized() const {

  return true;
}

void Animation::Swap(Animation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Animation::InternalSwap(Animation* other) {
  animation_name_.Swap(&other->animation_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Animation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Animation_descriptor_;
  metadata.reflection = Animation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Animation

// optional string animation_name = 1;
bool Animation::has_animation_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Animation::set_has_animation_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Animation::clear_has_animation_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Animation::clear_animation_name() {
  animation_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_animation_name();
}
 const ::std::string& Animation::animation_name() const {
  // @@protoc_insertion_point(field_get:tec.proto.Animation.animation_name)
  return animation_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Animation::set_animation_name(const ::std::string& value) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tec.proto.Animation.animation_name)
}
 void Animation::set_animation_name(const char* value) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tec.proto.Animation.animation_name)
}
 void Animation::set_animation_name(const char* value, size_t size) {
  set_has_animation_name();
  animation_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tec.proto.Animation.animation_name)
}
 ::std::string* Animation::mutable_animation_name() {
  set_has_animation_name();
  // @@protoc_insertion_point(field_mutable:tec.proto.Animation.animation_name)
  return animation_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Animation::release_animation_name() {
  clear_has_animation_name();
  return animation_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Animation::set_allocated_animation_name(::std::string* animation_name) {
  if (animation_name != NULL) {
    set_has_animation_name();
  } else {
    clear_has_animation_name();
  }
  animation_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), animation_name);
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Animation.animation_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Scale::kXFieldNumber;
const int Scale::kYFieldNumber;
const int Scale::kZFieldNumber;
#endif  // !_MSC_VER

Scale::Scale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Scale)
}

void Scale::InitAsDefaultInstance() {
}

Scale::Scale(const Scale& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Scale)
}

void Scale::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scale::~Scale() {
  // @@protoc_insertion_point(destructor:tec.proto.Scale)
  SharedDtor();
}

void Scale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scale_descriptor_;
}

const Scale& Scale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Scale* Scale::default_instance_ = NULL;

Scale* Scale::New(::google::protobuf::Arena* arena) const {
  Scale* n = new Scale;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scale::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Scale*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Scale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Scale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Scale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Scale)
  return false;
#undef DO_
}

void Scale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Scale)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Scale)
}

::google::protobuf::uint8* Scale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Scale)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Scale)
  return target;
}

int Scale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scale::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Scale* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Scale>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scale::MergeFrom(const Scale& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Scale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scale::CopyFrom(const Scale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scale::IsInitialized() const {

  return true;
}

void Scale::Swap(Scale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scale::InternalSwap(Scale* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scale_descriptor_;
  metadata.reflection = Scale_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scale

// optional float x = 1;
bool Scale::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scale::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Scale::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scale::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Scale::x() const {
  // @@protoc_insertion_point(field_get:tec.proto.Scale.x)
  return x_;
}
 void Scale::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Scale.x)
}

// optional float y = 2;
bool Scale::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scale::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Scale::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scale::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Scale::y() const {
  // @@protoc_insertion_point(field_get:tec.proto.Scale.y)
  return y_;
}
 void Scale::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Scale.y)
}

// optional float z = 3;
bool Scale::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Scale::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Scale::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Scale::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Scale::z() const {
  // @@protoc_insertion_point(field_get:tec.proto.Scale.z)
  return z_;
}
 void Scale::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Scale.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Component::kRenderableFieldNumber;
const int Component::kPositionFieldNumber;
const int Component::kOrientationFieldNumber;
const int Component::kViewFieldNumber;
const int Component::kAnimationFieldNumber;
const int Component::kScaleFieldNumber;
#endif  // !_MSC_VER

Component::Component()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Component)
}

void Component::InitAsDefaultInstance() {
  Component_default_oneof_instance_->renderable_ = const_cast< ::tec::proto::Renderable*>(&::tec::proto::Renderable::default_instance());
  Component_default_oneof_instance_->position_ = const_cast< ::tec::proto::Position*>(&::tec::proto::Position::default_instance());
  Component_default_oneof_instance_->orientation_ = const_cast< ::tec::proto::Orientation*>(&::tec::proto::Orientation::default_instance());
  Component_default_oneof_instance_->view_ = const_cast< ::tec::proto::View*>(&::tec::proto::View::default_instance());
  Component_default_oneof_instance_->animation_ = const_cast< ::tec::proto::Animation*>(&::tec::proto::Animation::default_instance());
  Component_default_oneof_instance_->scale_ = const_cast< ::tec::proto::Scale*>(&::tec::proto::Scale::default_instance());
}

Component::Component(const Component& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Component)
}

void Component::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_component();
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:tec.proto.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  if (has_component()) {
    clear_component();
  }
  if (this != default_instance_) {
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New(::google::protobuf::Arena* arena) const {
  Component* n = new Component;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Component::clear_component() {
  switch(component_case()) {
    case kRenderable: {
      delete component_.renderable_;
      break;
    }
    case kPosition: {
      delete component_.position_;
      break;
    }
    case kOrientation: {
      delete component_.orientation_;
      break;
    }
    case kView: {
      delete component_.view_;
      break;
    }
    case kAnimation: {
      delete component_.animation_;
      break;
    }
    case kScale: {
      delete component_.scale_;
      break;
    }
    case COMPONENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMPONENT_NOT_SET;
}


void Component::Clear() {
  clear_component();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Component)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tec.proto.Renderable renderable = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .tec.proto.Position position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orientation;
        break;
      }

      // optional .tec.proto.Orientation orientation = 3;
      case 3: {
        if (tag == 26) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_view;
        break;
      }

      // optional .tec.proto.View view = 4;
      case 4: {
        if (tag == 34) {
         parse_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_animation;
        break;
      }

      // optional .tec.proto.Animation animation = 5;
      case 5: {
        if (tag == 42) {
         parse_animation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Scale;
        break;
      }

      // optional .tec.proto.Scale Scale = 6;
      case 6: {
        if (tag == 50) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Component)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Component)
  return false;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Component)
  // optional .tec.proto.Renderable renderable = 1;
  if (has_renderable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *component_.renderable_, output);
  }

  // optional .tec.proto.Position position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *component_.position_, output);
  }

  // optional .tec.proto.Orientation orientation = 3;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *component_.orientation_, output);
  }

  // optional .tec.proto.View view = 4;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *component_.view_, output);
  }

  // optional .tec.proto.Animation animation = 5;
  if (has_animation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *component_.animation_, output);
  }

  // optional .tec.proto.Scale Scale = 6;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *component_.scale_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Component)
}

::google::protobuf::uint8* Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Component)
  // optional .tec.proto.Renderable renderable = 1;
  if (has_renderable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *component_.renderable_, target);
  }

  // optional .tec.proto.Position position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *component_.position_, target);
  }

  // optional .tec.proto.Orientation orientation = 3;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *component_.orientation_, target);
  }

  // optional .tec.proto.View view = 4;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *component_.view_, target);
  }

  // optional .tec.proto.Animation animation = 5;
  if (has_animation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *component_.animation_, target);
  }

  // optional .tec.proto.Scale Scale = 6;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *component_.scale_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Component)
  return target;
}

int Component::ByteSize() const {
  int total_size = 0;

  switch (component_case()) {
    // optional .tec.proto.Renderable renderable = 1;
    case kRenderable: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.renderable_);
      break;
    }
    // optional .tec.proto.Position position = 2;
    case kPosition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.position_);
      break;
    }
    // optional .tec.proto.Orientation orientation = 3;
    case kOrientation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.orientation_);
      break;
    }
    // optional .tec.proto.View view = 4;
    case kView: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.view_);
      break;
    }
    // optional .tec.proto.Animation animation = 5;
    case kAnimation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.animation_);
      break;
    }
    // optional .tec.proto.Scale Scale = 6;
    case kScale: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *component_.scale_);
      break;
    }
    case COMPONENT_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Component* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Component>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.component_case()) {
    case kRenderable: {
      mutable_renderable()->::tec::proto::Renderable::MergeFrom(from.renderable());
      break;
    }
    case kPosition: {
      mutable_position()->::tec::proto::Position::MergeFrom(from.position());
      break;
    }
    case kOrientation: {
      mutable_orientation()->::tec::proto::Orientation::MergeFrom(from.orientation());
      break;
    }
    case kView: {
      mutable_view()->::tec::proto::View::MergeFrom(from.view());
      break;
    }
    case kAnimation: {
      mutable_animation()->::tec::proto::Animation::MergeFrom(from.animation());
      break;
    }
    case kScale: {
      mutable_scale()->::tec::proto::Scale::MergeFrom(from.scale());
      break;
    }
    case COMPONENT_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {

  if (has_orientation()) {
    if (!this->orientation().IsInitialized()) return false;
  }
  return true;
}

void Component::Swap(Component* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Component::InternalSwap(Component* other) {
  std::swap(component_, other->component_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Component

// optional .tec.proto.Renderable renderable = 1;
bool Component::has_renderable() const {
  return component_case() == kRenderable;
}
void Component::set_has_renderable() {
  _oneof_case_[0] = kRenderable;
}
void Component::clear_renderable() {
  if (has_renderable()) {
    delete component_.renderable_;
    clear_has_component();
  }
}
 const ::tec::proto::Renderable& Component::renderable() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.renderable)
  return has_renderable() ? *component_.renderable_
                      : ::tec::proto::Renderable::default_instance();
}
 ::tec::proto::Renderable* Component::mutable_renderable() {
  if (!has_renderable()) {
    clear_component();
    set_has_renderable();
    component_.renderable_ = new ::tec::proto::Renderable;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.renderable)
  return component_.renderable_;
}
 ::tec::proto::Renderable* Component::release_renderable() {
  if (has_renderable()) {
    clear_has_component();
    ::tec::proto::Renderable* temp = component_.renderable_;
    component_.renderable_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_renderable(::tec::proto::Renderable* renderable) {
  clear_component();
  if (renderable) {
    set_has_renderable();
    component_.renderable_ = renderable;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.renderable)
}

// optional .tec.proto.Position position = 2;
bool Component::has_position() const {
  return component_case() == kPosition;
}
void Component::set_has_position() {
  _oneof_case_[0] = kPosition;
}
void Component::clear_position() {
  if (has_position()) {
    delete component_.position_;
    clear_has_component();
  }
}
 const ::tec::proto::Position& Component::position() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.position)
  return has_position() ? *component_.position_
                      : ::tec::proto::Position::default_instance();
}
 ::tec::proto::Position* Component::mutable_position() {
  if (!has_position()) {
    clear_component();
    set_has_position();
    component_.position_ = new ::tec::proto::Position;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.position)
  return component_.position_;
}
 ::tec::proto::Position* Component::release_position() {
  if (has_position()) {
    clear_has_component();
    ::tec::proto::Position* temp = component_.position_;
    component_.position_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_position(::tec::proto::Position* position) {
  clear_component();
  if (position) {
    set_has_position();
    component_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.position)
}

// optional .tec.proto.Orientation orientation = 3;
bool Component::has_orientation() const {
  return component_case() == kOrientation;
}
void Component::set_has_orientation() {
  _oneof_case_[0] = kOrientation;
}
void Component::clear_orientation() {
  if (has_orientation()) {
    delete component_.orientation_;
    clear_has_component();
  }
}
 const ::tec::proto::Orientation& Component::orientation() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.orientation)
  return has_orientation() ? *component_.orientation_
                      : ::tec::proto::Orientation::default_instance();
}
 ::tec::proto::Orientation* Component::mutable_orientation() {
  if (!has_orientation()) {
    clear_component();
    set_has_orientation();
    component_.orientation_ = new ::tec::proto::Orientation;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.orientation)
  return component_.orientation_;
}
 ::tec::proto::Orientation* Component::release_orientation() {
  if (has_orientation()) {
    clear_has_component();
    ::tec::proto::Orientation* temp = component_.orientation_;
    component_.orientation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_orientation(::tec::proto::Orientation* orientation) {
  clear_component();
  if (orientation) {
    set_has_orientation();
    component_.orientation_ = orientation;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.orientation)
}

// optional .tec.proto.View view = 4;
bool Component::has_view() const {
  return component_case() == kView;
}
void Component::set_has_view() {
  _oneof_case_[0] = kView;
}
void Component::clear_view() {
  if (has_view()) {
    delete component_.view_;
    clear_has_component();
  }
}
 const ::tec::proto::View& Component::view() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.view)
  return has_view() ? *component_.view_
                      : ::tec::proto::View::default_instance();
}
 ::tec::proto::View* Component::mutable_view() {
  if (!has_view()) {
    clear_component();
    set_has_view();
    component_.view_ = new ::tec::proto::View;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.view)
  return component_.view_;
}
 ::tec::proto::View* Component::release_view() {
  if (has_view()) {
    clear_has_component();
    ::tec::proto::View* temp = component_.view_;
    component_.view_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_view(::tec::proto::View* view) {
  clear_component();
  if (view) {
    set_has_view();
    component_.view_ = view;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.view)
}

// optional .tec.proto.Animation animation = 5;
bool Component::has_animation() const {
  return component_case() == kAnimation;
}
void Component::set_has_animation() {
  _oneof_case_[0] = kAnimation;
}
void Component::clear_animation() {
  if (has_animation()) {
    delete component_.animation_;
    clear_has_component();
  }
}
 const ::tec::proto::Animation& Component::animation() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.animation)
  return has_animation() ? *component_.animation_
                      : ::tec::proto::Animation::default_instance();
}
 ::tec::proto::Animation* Component::mutable_animation() {
  if (!has_animation()) {
    clear_component();
    set_has_animation();
    component_.animation_ = new ::tec::proto::Animation;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.animation)
  return component_.animation_;
}
 ::tec::proto::Animation* Component::release_animation() {
  if (has_animation()) {
    clear_has_component();
    ::tec::proto::Animation* temp = component_.animation_;
    component_.animation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_animation(::tec::proto::Animation* animation) {
  clear_component();
  if (animation) {
    set_has_animation();
    component_.animation_ = animation;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.animation)
}

// optional .tec.proto.Scale Scale = 6;
bool Component::has_scale() const {
  return component_case() == kScale;
}
void Component::set_has_scale() {
  _oneof_case_[0] = kScale;
}
void Component::clear_scale() {
  if (has_scale()) {
    delete component_.scale_;
    clear_has_component();
  }
}
 const ::tec::proto::Scale& Component::scale() const {
  // @@protoc_insertion_point(field_get:tec.proto.Component.Scale)
  return has_scale() ? *component_.scale_
                      : ::tec::proto::Scale::default_instance();
}
 ::tec::proto::Scale* Component::mutable_scale() {
  if (!has_scale()) {
    clear_component();
    set_has_scale();
    component_.scale_ = new ::tec::proto::Scale;
  }
  // @@protoc_insertion_point(field_mutable:tec.proto.Component.Scale)
  return component_.scale_;
}
 ::tec::proto::Scale* Component::release_scale() {
  if (has_scale()) {
    clear_has_component();
    ::tec::proto::Scale* temp = component_.scale_;
    component_.scale_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
 void Component::set_allocated_scale(::tec::proto::Scale* scale) {
  clear_component();
  if (scale) {
    set_has_scale();
    component_.scale_ = scale;
  }
  // @@protoc_insertion_point(field_set_allocated:tec.proto.Component.Scale)
}

bool Component::has_component() const {
  return component_case() != COMPONENT_NOT_SET;
}
void Component::clear_has_component() {
  _oneof_case_[0] = COMPONENT_NOT_SET;
}
Component::ComponentCase Component::component_case() const {
  return Component::ComponentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Entity::kIdFieldNumber;
const int Entity::kComponentsFieldNumber;
#endif  // !_MSC_VER

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.Entity)
}

void Entity::InitAsDefaultInstance() {
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.Entity)
}

void Entity::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:tec.proto.Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::Clear() {
  id_ = GOOGLE_ULONGLONG(0);
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_components;
        break;
      }

      // repeated .tec.proto.Component components = 2;
      case 2: {
        if (tag == 18) {
         parse_components:
          DO_(input->IncrementRecursionDepth());
         parse_loop_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_components()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_components;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.Entity)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .tec.proto.Component components = 2;
  for (unsigned int i = 0, n = this->components_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->components(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.Entity)
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.Entity)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .tec.proto.Component components = 2;
  for (unsigned int i = 0, n = this->components_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->components(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.Entity)
  return target;
}

int Entity::ByteSize() const {
  int total_size = 0;

  // required uint64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  // repeated .tec.proto.Component components = 2;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  components_.MergeFrom(from.components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->components())) return false;
  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  std::swap(id_, other->id_);
  components_.UnsafeArenaSwap(&other->components_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// required uint64 id = 1;
bool Entity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Entity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entity::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 Entity::id() const {
  // @@protoc_insertion_point(field_get:tec.proto.Entity.id)
  return id_;
}
 void Entity::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tec.proto.Entity.id)
}

// repeated .tec.proto.Component components = 2;
int Entity::components_size() const {
  return components_.size();
}
void Entity::clear_components() {
  components_.Clear();
}
 const ::tec::proto::Component& Entity::components(int index) const {
  // @@protoc_insertion_point(field_get:tec.proto.Entity.components)
  return components_.Get(index);
}
 ::tec::proto::Component* Entity::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:tec.proto.Entity.components)
  return components_.Mutable(index);
}
 ::tec::proto::Component* Entity::add_components() {
  // @@protoc_insertion_point(field_add:tec.proto.Entity.components)
  return components_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::tec::proto::Component >&
Entity::components() const {
  // @@protoc_insertion_point(field_list:tec.proto.Entity.components)
  return components_;
}
 ::google::protobuf::RepeatedPtrField< ::tec::proto::Component >*
Entity::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:tec.proto.Entity.components)
  return &components_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int EntityList::kEntitiesFieldNumber;
#endif  // !_MSC_VER

EntityList::EntityList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tec.proto.EntityList)
}

void EntityList::InitAsDefaultInstance() {
}

EntityList::EntityList(const EntityList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tec.proto.EntityList)
}

void EntityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityList::~EntityList() {
  // @@protoc_insertion_point(destructor:tec.proto.EntityList)
  SharedDtor();
}

void EntityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityList_descriptor_;
}

const EntityList& EntityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_components_2eproto();
  return *default_instance_;
}

EntityList* EntityList::default_instance_ = NULL;

EntityList* EntityList::New(::google::protobuf::Arena* arena) const {
  EntityList* n = new EntityList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityList::Clear() {
  entities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EntityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tec.proto.EntityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tec.proto.Entity entities = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_entities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tec.proto.EntityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tec.proto.EntityList)
  return false;
#undef DO_
}

void EntityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tec.proto.EntityList)
  // repeated .tec.proto.Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entities(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tec.proto.EntityList)
}

::google::protobuf::uint8* EntityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tec.proto.EntityList)
  // repeated .tec.proto.Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entities(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tec.proto.EntityList)
  return target;
}

int EntityList::ByteSize() const {
  int total_size = 0;

  // repeated .tec.proto.Entity entities = 1;
  total_size += 1 * this->entities_size();
  for (int i = 0; i < this->entities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entities(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityList::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EntityList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityList>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityList::MergeFrom(const EntityList& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  entities_.MergeFrom(from.entities_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EntityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityList::CopyFrom(const EntityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entities())) return false;
  return true;
}

void EntityList::Swap(EntityList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityList::InternalSwap(EntityList* other) {
  entities_.UnsafeArenaSwap(&other->entities_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityList_descriptor_;
  metadata.reflection = EntityList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityList

// repeated .tec.proto.Entity entities = 1;
int EntityList::entities_size() const {
  return entities_.size();
}
void EntityList::clear_entities() {
  entities_.Clear();
}
 const ::tec::proto::Entity& EntityList::entities(int index) const {
  // @@protoc_insertion_point(field_get:tec.proto.EntityList.entities)
  return entities_.Get(index);
}
 ::tec::proto::Entity* EntityList::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:tec.proto.EntityList.entities)
  return entities_.Mutable(index);
}
 ::tec::proto::Entity* EntityList::add_entities() {
  // @@protoc_insertion_point(field_add:tec.proto.EntityList.entities)
  return entities_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::tec::proto::Entity >&
EntityList::entities() const {
  // @@protoc_insertion_point(field_list:tec.proto.EntityList.entities)
  return entities_;
}
 ::google::protobuf::RepeatedPtrField< ::tec::proto::Entity >*
EntityList::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:tec.proto.EntityList.entities)
  return &entities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tec

// @@protoc_insertion_point(global_scope)
